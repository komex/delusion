{"name":"Delusion","tagline":"The mock object instrument for PHP unit tests","body":"### About project\r\nDelusion is a testing instrument for programmers and quality engineers that helps them to test PHP projects by giving ability to mock and stub any objects in realtime. It's works only with projects which uses [Composer](http://getcomposer.org/).\r\n\r\n### How to use\r\nIt's very easy to use Delusion in your tests. First of all you must inject it before all tests. You can use ```bootstrap``` parameter in [PHPUnit](http://phpunit.de/manual/3.7/en/appendixes.configuration.html#appendixes.configuration.phpunit) or [Unteist](https://github.com/komex/unteist) configuration to specify path to bootstrap file.\r\nIn this file you need to include Composer autoload first if it's not included yet (does not need in case of using Unteist framework) and start Delusion injection. Bootstrap file may looks like this:\r\n\r\n```php\r\n<?php\r\nrequire 'vendor/autoload.php';\r\n\\Delusion\\Delusion::injection();\r\n```\r\nNow you can controll all instances and static classes loaded after last line.\r\n\r\n### Control new objects (simple example)\r\nAt the first blush, you will not see the difference. You can check class name, interface, methods and variables. You can invoke any methods and you will get real object behavior. Lets check it with simple class.\r\n\r\n```php\r\n<?php\r\n// file SimpleClass.php\r\nclass SimpleClass extends SplDoublyLinkedList\r\n{\r\n    public $var = 2;\r\n\r\n    public function __construct($var = null)\r\n    {\r\n        if ($var !== null) {\r\n            $this->var = $var;\r\n        }\r\n    }\r\n\r\n    public function getVar()\r\n    {\r\n        return $this->var;\r\n    }\r\n}\r\n```\r\n\r\nNow we will check class behavior.\r\n\r\n```php\r\n<?php\r\n// First instance\r\n$class1 = new SimpleClass;\r\nget_class($class1); // SimpleClass\r\nis_subclass_of($class1, 'SplDoublyLinkedList'); // true\r\nis_subclass_of($class1, 'SplFixedArray'); // false\r\n$class1->var; // 2\r\n$class1->getVar(); // 2\r\n\r\n// Second instance (with parameter in constructor)\r\n$class2 = new SimpleClass(3);\r\nget_class($class1); // SimpleClass\r\nis_subclass_of($class1, 'SplDoublyLinkedList'); // true\r\nis_subclass_of($class1, 'SplFixedArray'); // false\r\n$class1->var; // 3\r\n$class1->getVar(); // 3\r\n```\r\n\r\nLooks like nothing happened. But let's do some magic.\r\n\r\n```php\r\n<?php\r\n// First instance\r\n$class1 = new SimpleClass;\r\n$class1 instanceof \\Delusion\\PuppetThreadInterface; // true. Class has a new methods!\r\n$class1->var; // 2\r\n$class1->getVar(); // 2\r\n$class1->delusionSetBehavior('getVar', 'a new value');\r\n$class1->var; // 2\r\n$class1->getVar(); // 'a new value'\r\n\r\n$class2 = new SimpleClass(3);\r\n$class2->var; // 3\r\n$class2->getVar(); // 3\r\n```\r\n\r\nThe ```var``` in first class is 2, but method returns a string which we set by ```delusionSetBehavior()``` method. The second class works as designed.\r\n\r\n### Installation\r\nJust add Delusion project to ```require``` or ```require-dev``` section in your composer.json and do update.\r\n\r\n```json\r\n{\r\n    \"require-dev\": {\r\n        \"komex/delusion\": \"dev-develop\"\r\n    }\r\n}\r\n```\r\n\r\nNow you can do anything with all objects in your project.\r\n\r\n### Authors\r\nThis project was founded by Andrey Kolchenko (@komex) in August of 2013.\r\n\r\n### Support or Contact\r\nHaving trouble with Delusion? Contact andrey@kolchenko.me and weâ€™ll help you in the short time.","google":"UA-17427455-2","note":"Don't delete this file! It's used internally to help with page regeneration."}